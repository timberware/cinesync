generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  isPrivate Boolean     @map("is_private")
  creatorId String      @map("creator_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  listMovie ListMovie[]
  listUser  ListUser[]
  comments  Comment[]
}

model ListMovie {
  listId    String   @map("list_id") @db.Uuid
  movieId   String   @map("movie_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  List      List     @relation(fields: [listId], references: [id])
  Movie     Movie    @relation(fields: [movieId], references: [id])

  @@id([listId, movieId])
}

model Movie {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  genre       String[]
  releaseDate String      @map("release_date")
  posterUrl   String      @map("poster_url")
  rating      Float
  tmdbId      Int         @unique @map("tmdb_id")
  eTag        String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  listMovie   ListMovie[]
  user        User[]
}

model ListUser {
  listId      String   @map("list_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  lastVisited DateTime @default(now()) @map("last_visited")
  List        List     @relation(fields: [listId], references: [id])
  User        User     @relation(fields: [userId], references: [id])

  @@id([listId, userId])
}

model User {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username       String     @unique
  email          String     @unique
  password       String
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  role           Role
  avatarName     String?    @map("avatar_name")
  listUser       ListUser[]
  friendsWith    Friends[]  @relation("user_1")
  friendsRequest Friends[]  @relation("user_2")
  comments       Comment[]
  movie          Movie[]
}

model Friends {
  user_1    User     @relation("user_1", fields: [userId1], references: [id], onDelete: Cascade)
  userId1   String   @map("id_1") @db.Uuid
  user_2    User     @relation("user_2", fields: [userId2], references: [id], onDelete: Cascade)
  userId2   String   @map("id_2") @db.Uuid
  isFriend  Boolean  @map("is_friend")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId1, userId2])
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("author_id") @db.Uuid
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    String   @map("list_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Image {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String @unique
  image    Bytes
  mimetype String @default("") @map("mime_type")
}

enum Role {
  ADMIN
  USER
}
